// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class contributed extends ethereum.Event {
  get params(): contributed__Params {
    return new contributed__Params(this);
  }
}

export class contributed__Params {
  _event: contributed;

  constructor(event: contributed) {
    this._event = event;
  }

  get contributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get labrotory(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get mage(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get difficulty(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class orderFinished extends ethereum.Event {
  get params(): orderFinished__Params {
    return new orderFinished__Params(this);
  }
}

export class orderFinished__Params {
  _event: orderFinished;

  constructor(event: orderFinished) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class orderRegistered extends ethereum.Event {
  get params(): orderRegistered__Params {
    return new orderRegistered__Params(this);
  }
}

export class orderRegistered__Params {
  _event: orderRegistered;

  constructor(event: orderRegistered) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class signalsApproved extends ethereum.Event {
  get params(): signalsApproved__Params {
    return new signalsApproved__Params(this);
  }
}

export class signalsApproved__Params {
  _event: signalsApproved;

  constructor(event: signalsApproved) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get confirmCount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ZarelaContract__CategoriesResult {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ZarelaContract__getOrderDataResult {
  value0: Array<Address>;
  value1: Array<Address>;
  value2: Array<BigInt>;
  value3: Array<boolean>;
  value4: Array<boolean>;
  value5: Array<BigInt>;

  constructor(
    value0: Array<Address>,
    value1: Array<Address>,
    value2: Array<BigInt>,
    value3: Array<boolean>,
    value4: Array<boolean>,
    value5: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromBooleanArray(this.value3));
    map.set("value4", ethereum.Value.fromBooleanArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    return map;
  }
}

export class ZarelaContract__orderResultResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }
}

export class ZarelaContract__ordersResult {
  value0: BigInt;
  value1: string;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: string;
  value7: string;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: string;

  constructor(
    value0: BigInt,
    value1: string,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: string,
    value7: string,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromString(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromString(this.value11));
    return map;
  }
}

export class ZarelaContract__ownerSpecificDataResult {
  value0: Array<string>;
  value1: Array<string>;

  constructor(value0: Array<string>, value1: Array<string>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromStringArray(this.value0));
    map.set("value1", ethereum.Value.fromStringArray(this.value1));
    return map;
  }
}

export class ZarelaContract__userMapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ZarelaContract extends ethereum.SmartContract {
  static bind(address: Address): ZarelaContract {
    return new ZarelaContract("ZarelaContract", address);
  }

  Categories(param0: BigInt): ZarelaContract__CategoriesResult {
    let result = super.call(
      "Categories",
      "Categories(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ZarelaContract__CategoriesResult(
      result[0].toString(),
      result[1].toBigInt()
    );
  }

  try_Categories(
    param0: BigInt
  ): ethereum.CallResult<ZarelaContract__CategoriesResult> {
    let result = super.tryCall(
      "Categories",
      "Categories(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZarelaContract__CategoriesResult(
        value[0].toString(),
        value[1].toBigInt()
      )
    );
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bankBalance(): BigInt {
    let result = super.call("bankBalance", "bankBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bankBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bankBalance", "bankBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnedTokensPerDay(param0: BigInt): BigInt {
    let result = super.call(
      "burnedTokensPerDay",
      "burnedTokensPerDay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_burnedTokensPerDay(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burnedTokensPerDay",
      "burnedTokensPerDay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  countDown24Hours(): BigInt {
    let result = super.call(
      "countDown24Hours",
      "countDown24Hours():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_countDown24Hours(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "countDown24Hours",
      "countDown24Hours():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dailyBalance(param0: BigInt): BigInt {
    let result = super.call("dailyBalance", "dailyBalance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_dailyBalance(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dailyBalance",
      "dailyBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dailyContributionsCount(param0: BigInt): BigInt {
    let result = super.call(
      "dailyContributionsCount",
      "dailyContributionsCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_dailyContributionsCount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dailyContributionsCount",
      "dailyContributionsCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dailyRewardPerContributor(param0: BigInt): BigInt {
    let result = super.call(
      "dailyRewardPerContributor",
      "dailyRewardPerContributor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_dailyRewardPerContributor(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dailyRewardPerContributor",
      "dailyRewardPerContributor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dayCounterOf20Months(): BigInt {
    let result = super.call(
      "dayCounterOf20Months",
      "dayCounterOf20Months():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_dayCounterOf20Months(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dayCounterOf20Months",
      "dayCounterOf20Months():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dayOfTokenBurning(): BigInt {
    let result = super.call(
      "dayOfTokenBurning",
      "dayOfTokenBurning():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_dayOfTokenBurning(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dayOfTokenBurning",
      "dayOfTokenBurning():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getOrderData(_orderId: BigInt): ZarelaContract__getOrderDataResult {
    let result = super.call(
      "getOrderData",
      "getOrderData(uint256):(address[],address[],uint256[],bool[],bool[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_orderId)]
    );

    return new ZarelaContract__getOrderDataResult(
      result[0].toAddressArray(),
      result[1].toAddressArray(),
      result[2].toBigIntArray(),
      result[3].toBooleanArray(),
      result[4].toBooleanArray(),
      result[5].toBigIntArray()
    );
  }

  try_getOrderData(
    _orderId: BigInt
  ): ethereum.CallResult<ZarelaContract__getOrderDataResult> {
    let result = super.tryCall(
      "getOrderData",
      "getOrderData(uint256):(address[],address[],uint256[],bool[],bool[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZarelaContract__getOrderDataResult(
        value[0].toAddressArray(),
        value[1].toAddressArray(),
        value[2].toBigIntArray(),
        value[3].toBooleanArray(),
        value[4].toBooleanArray(),
        value[5].toBigIntArray()
      )
    );
  }

  halvingCounter(): BigInt {
    let result = super.call("halvingCounter", "halvingCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_halvingCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "halvingCounter",
      "halvingCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  indexCounter(): BigInt {
    let result = super.call("indexCounter", "indexCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_indexCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("indexCounter", "indexCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  indexOfAddressPendingReward(): BigInt {
    let result = super.call(
      "indexOfAddressPendingReward",
      "indexOfAddressPendingReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_indexOfAddressPendingReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "indexOfAddressPendingReward",
      "indexOfAddressPendingReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  indexOfZeroDailyTokens(): BigInt {
    let result = super.call(
      "indexOfZeroDailyTokens",
      "indexOfZeroDailyTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_indexOfZeroDailyTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "indexOfZeroDailyTokens",
      "indexOfZeroDailyTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isZarelaEnd(): boolean {
    let result = super.call("isZarelaEnd", "isZarelaEnd():(bool)", []);

    return result[0].toBoolean();
  }

  try_isZarelaEnd(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isZarelaEnd", "isZarelaEnd():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRewardableIndex(): BigInt {
    let result = super.call(
      "lastRewardableIndex",
      "lastRewardableIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRewardableIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardableIndex",
      "lastRewardableIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxUserDailyReward(): BigInt {
    let result = super.call(
      "maxUserDailyReward",
      "maxUserDailyReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxUserDailyReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxUserDailyReward",
      "maxUserDailyReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  orderDataMap(param0: BigInt): BigInt {
    let result = super.call("orderDataMap", "orderDataMap(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_orderDataMap(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "orderDataMap",
      "orderDataMap(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderResult(): ZarelaContract__orderResultResult {
    let result = super.call(
      "orderResult",
      "orderResult():(uint256[],uint256[],uint256[])",
      []
    );

    return new ZarelaContract__orderResultResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray()
    );
  }

  try_orderResult(): ethereum.CallResult<ZarelaContract__orderResultResult> {
    let result = super.tryCall(
      "orderResult",
      "orderResult():(uint256[],uint256[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZarelaContract__orderResultResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray()
      )
    );
  }

  orderSize(): BigInt {
    let result = super.call("orderSize", "orderSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_orderSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("orderSize", "orderSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orders(param0: BigInt): ZarelaContract__ordersResult {
    let result = super.call(
      "orders",
      "orders(uint256):(uint256,string,address,uint256,uint256,uint256,string,string,uint256,uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ZarelaContract__ordersResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toString(),
      result[7].toString(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toString()
    );
  }

  try_orders(
    param0: BigInt
  ): ethereum.CallResult<ZarelaContract__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(uint256):(uint256,string,address,uint256,uint256,uint256,string,string,uint256,uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZarelaContract__ordersResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toString(),
        value[7].toString(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toString()
      )
    );
  }

  ownerSpecificData(_orderId: BigInt): ZarelaContract__ownerSpecificDataResult {
    let result = super.call(
      "ownerSpecificData",
      "ownerSpecificData(uint256):(string[],string[])",
      [ethereum.Value.fromUnsignedBigInt(_orderId)]
    );

    return new ZarelaContract__ownerSpecificDataResult(
      result[0].toStringArray(),
      result[1].toStringArray()
    );
  }

  try_ownerSpecificData(
    _orderId: BigInt
  ): ethereum.CallResult<ZarelaContract__ownerSpecificDataResult> {
    let result = super.tryCall(
      "ownerSpecificData",
      "ownerSpecificData(uint256):(string[],string[])",
      [ethereum.Value.fromUnsignedBigInt(_orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZarelaContract__ownerSpecificDataResult(
        value[0].toStringArray(),
        value[1].toStringArray()
      )
    );
  }

  paymentDay(): BigInt {
    let result = super.call("paymentDay", "paymentDay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_paymentDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("paymentDay", "paymentDay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentQueue(param0: BigInt): Address {
    let result = super.call("paymentQueue", "paymentQueue(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_paymentQueue(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "paymentQueue",
      "paymentQueue(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  remainedDailyTokens(param0: BigInt): BigInt {
    let result = super.call(
      "remainedDailyTokens",
      "remainedDailyTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_remainedDailyTokens(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainedDailyTokens",
      "remainedDailyTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  todayContributionsCount(): BigInt {
    let result = super.call(
      "todayContributionsCount",
      "todayContributionsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_todayContributionsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "todayContributionsCount",
      "todayContributionsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTokenReleaseDaily(): BigInt {
    let result = super.call(
      "totalTokenReleaseDaily",
      "totalTokenReleaseDaily():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalTokenReleaseDaily(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTokenReleaseDaily",
      "totalTokenReleaseDaily():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userMap(param0: Address): ZarelaContract__userMapResult {
    let result = super.call("userMap", "userMap(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new ZarelaContract__userMapResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userMap(
    param0: Address
  ): ethereum.CallResult<ZarelaContract__userMapResult> {
    let result = super.tryCall(
      "userMap",
      "userMap(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZarelaContract__userMapResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  zarelaDayCounter(): BigInt {
    let result = super.call(
      "zarelaDayCounter",
      "zarelaDayCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_zarelaDayCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "zarelaDayCounter",
      "zarelaDayCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  zarelaDifficultyOfDay(): BigInt {
    let result = super.call(
      "zarelaDifficultyOfDay",
      "zarelaDifficultyOfDay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_zarelaDifficultyOfDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "zarelaDifficultyOfDay",
      "zarelaDifficultyOfDay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnFromCall extends ethereum.Call {
  get inputs(): BurnFromCall__Inputs {
    return new BurnFromCall__Inputs(this);
  }

  get outputs(): BurnFromCall__Outputs {
    return new BurnFromCall__Outputs(this);
  }
}

export class BurnFromCall__Inputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnFromCall__Outputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }
}

export class ConfirmContributorCall extends ethereum.Call {
  get inputs(): ConfirmContributorCall__Inputs {
    return new ConfirmContributorCall__Inputs(this);
  }

  get outputs(): ConfirmContributorCall__Outputs {
    return new ConfirmContributorCall__Outputs(this);
  }
}

export class ConfirmContributorCall__Inputs {
  _call: ConfirmContributorCall;

  constructor(call: ConfirmContributorCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _index(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ConfirmContributorCall__Outputs {
  _call: ConfirmContributorCall;

  constructor(call: ConfirmContributorCall) {
    this._call = call;
  }
}

export class ContributeCall extends ethereum.Call {
  get inputs(): ContributeCall__Inputs {
    return new ContributeCall__Inputs(this);
  }

  get outputs(): ContributeCall__Outputs {
    return new ContributeCall__Outputs(this);
  }
}

export class ContributeCall__Inputs {
  _call: ContributeCall;

  constructor(call: ContributeCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _contributorAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _laboratoryAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _isContributorGainReward(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _orderOwner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _ipfsHash(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _encryptionKey(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class ContributeCall__Outputs {
  _call: ContributeCall;

  constructor(call: ContributeCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SubmitNewRequestCall extends ethereum.Call {
  get inputs(): SubmitNewRequestCall__Inputs {
    return new SubmitNewRequestCall__Inputs(this);
  }

  get outputs(): SubmitNewRequestCall__Outputs {
    return new SubmitNewRequestCall__Outputs(this);
  }
}

export class SubmitNewRequestCall__Inputs {
  _call: SubmitNewRequestCall;

  constructor(call: SubmitNewRequestCall) {
    this._call = call;
  }

  get _orderTitle(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _zPaper(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _tokenPerContributor(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _tokenPerLaboratory(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _totalContributors(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _zarelaCategory(): string {
    return this._call.inputValues[6].value.toString();
  }

  get _businessCategory(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _accessPublicKey(): string {
    return this._call.inputValues[8].value.toString();
  }
}

export class SubmitNewRequestCall__Outputs {
  _call: SubmitNewRequestCall;

  constructor(call: SubmitNewRequestCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
