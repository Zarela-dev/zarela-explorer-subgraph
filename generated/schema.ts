// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Request extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromString(""));
    this.set("requestNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Request entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Request entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Request", id.toString(), this);
    }
  }

  static load(id: string): Request | null {
    return changetype<Request | null>(store.get("Request", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get requestNumber(): BigInt {
    let value = this.get("requestNumber");
    return value!.toBigInt();
  }

  set requestNumber(value: BigInt) {
    this.set("requestNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get contributions(): Array<string> | null {
    let value = this.get("contributions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set contributions(value: Array<string> | null) {
    if (!value) {
      this.unset("contributions");
    } else {
      this.set("contributions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get confirmations(): Array<string> | null {
    let value = this.get("confirmations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set confirmations(value: Array<string> | null) {
    if (!value) {
      this.unset("confirmations");
    } else {
      this.set("confirmations", Value.fromStringArray(<Array<string>>value));
    }
  }

  get details(): string {
    let value = this.get("details");
    return value!.toString();
  }

  set details(value: string) {
    this.set("details", Value.fromString(value));
  }
}

export class RequestDetail extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("requestID", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("title", Value.fromString(""));
    this.set("description", Value.fromString(""));
    this.set("requesterAddress", Value.fromBytes(Bytes.empty()));
    this.set("angelTokenPay", Value.fromBigInt(BigInt.zero()));
    this.set("laboratoryTokenPay", Value.fromBigInt(BigInt.zero()));
    this.set("totalTokenPay", Value.fromBigInt(BigInt.zero()));
    this.set("totalContributors", Value.fromBigInt(BigInt.zero()));
    this.set("totalContributed", Value.fromI32(0));
    this.set("zpaper", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("categories", Value.fromString(""));
    this.set("totalContributedCount", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RequestDetail entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RequestDetail entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RequestDetail", id.toString(), this);
    }
  }

  static load(id: string): RequestDetail | null {
    return changetype<RequestDetail | null>(store.get("RequestDetail", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get requestID(): string {
    let value = this.get("requestID");
    return value!.toString();
  }

  set requestID(value: string) {
    this.set("requestID", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get requesterAddress(): Bytes {
    let value = this.get("requesterAddress");
    return value!.toBytes();
  }

  set requesterAddress(value: Bytes) {
    this.set("requesterAddress", Value.fromBytes(value));
  }

  get angelTokenPay(): BigInt {
    let value = this.get("angelTokenPay");
    return value!.toBigInt();
  }

  set angelTokenPay(value: BigInt) {
    this.set("angelTokenPay", Value.fromBigInt(value));
  }

  get laboratoryTokenPay(): BigInt {
    let value = this.get("laboratoryTokenPay");
    return value!.toBigInt();
  }

  set laboratoryTokenPay(value: BigInt) {
    this.set("laboratoryTokenPay", Value.fromBigInt(value));
  }

  get totalTokenPay(): BigInt {
    let value = this.get("totalTokenPay");
    return value!.toBigInt();
  }

  set totalTokenPay(value: BigInt) {
    this.set("totalTokenPay", Value.fromBigInt(value));
  }

  get totalContributors(): BigInt {
    let value = this.get("totalContributors");
    return value!.toBigInt();
  }

  set totalContributors(value: BigInt) {
    this.set("totalContributors", Value.fromBigInt(value));
  }

  get totalContributed(): i32 {
    let value = this.get("totalContributed");
    return value!.toI32();
  }

  set totalContributed(value: i32) {
    this.set("totalContributed", Value.fromI32(value));
  }

  get zpaper(): string {
    let value = this.get("zpaper");
    return value!.toString();
  }

  set zpaper(value: string) {
    this.set("zpaper", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get categories(): string {
    let value = this.get("categories");
    return value!.toString();
  }

  set categories(value: string) {
    this.set("categories", Value.fromString(value));
  }

  get totalContributedCount(): i32 {
    let value = this.get("totalContributedCount");
    return value!.toI32();
  }

  set totalContributedCount(value: i32) {
    this.set("totalContributedCount", Value.fromI32(value));
  }
}

export class Contribution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("contributorAddress", Value.fromBytes(Bytes.empty()));
    this.set("hubAddress", Value.fromBytes(Bytes.empty()));
    this.set("requestID", Value.fromString(""));
    this.set("contributorGetsReward", Value.fromBoolean(false));
    this.set("mageAddress", Value.fromBytes(Bytes.empty()));
    this.set("fileCID", Value.fromString(""));
    this.set("metadataCID", Value.fromString(""));
    this.set("difficulty", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Contribution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Contribution entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Contribution", id.toString(), this);
    }
  }

  static load(id: string): Contribution | null {
    return changetype<Contribution | null>(store.get("Contribution", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get contributorAddress(): Bytes {
    let value = this.get("contributorAddress");
    return value!.toBytes();
  }

  set contributorAddress(value: Bytes) {
    this.set("contributorAddress", Value.fromBytes(value));
  }

  get hubAddress(): Bytes {
    let value = this.get("hubAddress");
    return value!.toBytes();
  }

  set hubAddress(value: Bytes) {
    this.set("hubAddress", Value.fromBytes(value));
  }

  get requestID(): string {
    let value = this.get("requestID");
    return value!.toString();
  }

  set requestID(value: string) {
    this.set("requestID", Value.fromString(value));
  }

  get contributorGetsReward(): boolean {
    let value = this.get("contributorGetsReward");
    return value!.toBoolean();
  }

  set contributorGetsReward(value: boolean) {
    this.set("contributorGetsReward", Value.fromBoolean(value));
  }

  get mageAddress(): Bytes {
    let value = this.get("mageAddress");
    return value!.toBytes();
  }

  set mageAddress(value: Bytes) {
    this.set("mageAddress", Value.fromBytes(value));
  }

  get fileCID(): string {
    let value = this.get("fileCID");
    return value!.toString();
  }

  set fileCID(value: string) {
    this.set("fileCID", Value.fromString(value));
  }

  get metadataCID(): string {
    let value = this.get("metadataCID");
    return value!.toString();
  }

  set metadataCID(value: string) {
    this.set("metadataCID", Value.fromString(value));
  }

  get difficulty(): BigInt {
    let value = this.get("difficulty");
    return value!.toBigInt();
  }

  set difficulty(value: BigInt) {
    this.set("difficulty", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Confirmation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("requestID", Value.fromString(""));
    this.set("originalIndexes", Value.fromBigIntArray(new Array(0)));
    this.set("confirmCount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Confirmation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Confirmation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Confirmation", id.toString(), this);
    }
  }

  static load(id: string): Confirmation | null {
    return changetype<Confirmation | null>(store.get("Confirmation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get requestID(): string {
    let value = this.get("requestID");
    return value!.toString();
  }

  set requestID(value: string) {
    this.set("requestID", Value.fromString(value));
  }

  get originalIndexes(): Array<BigInt> {
    let value = this.get("originalIndexes");
    return value!.toBigIntArray();
  }

  set originalIndexes(value: Array<BigInt>) {
    this.set("originalIndexes", Value.fromBigIntArray(value));
  }

  get confirmCount(): BigInt {
    let value = this.get("confirmCount");
    return value!.toBigInt();
  }

  set confirmCount(value: BigInt) {
    this.set("confirmCount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("method", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("gasLimit", Value.fromBigInt(BigInt.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get method(): string {
    let value = this.get("method");
    return value!.toString();
  }

  set method(value: string) {
    this.set("method", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get gasLimit(): BigInt {
    let value = this.get("gasLimit");
    return value!.toBigInt();
  }

  set gasLimit(value: BigInt) {
    this.set("gasLimit", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}
